{"version":3,"sources":["webpack:///./src/components/panels/MusicMpd/Index.vue","webpack:///./src/components/panels/MusicMpd/Index.vue?49af"],"names":["loading","plugin-name","config","tracks","status","play","pause","stop","previous","next","clear","setVolume","seek","consume","random","repeat","refreshStatus","refreshTracks","name","components","Loading","MusicPlugin","mixins","Utils","props","type","Object","default","data","methods","background","request","entries","reduce","obj","k","v","parseInt","split","map","t","refresh","Promise","all","event","pos","volume","position","value","mounted","this","render"],"mappings":"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","file":"static/js/chunk-2d21da1a.867fde19.js","sourcesContent":["<template>\n  <Loading v-if=\"loading\" />\n  <MusicPlugin plugin-name=\"music.mpd\" :loading=\"loading\" :config=\"config\" :tracks=\"tracks\" :status=\"status\"\n               @play=\"play\" @pause=\"pause\" @stop=\"stop\" @previous=\"previous\" @next=\"next\" @clear=\"clear\"\n               @set-volume=\"setVolume\" @seek=\"seek\" @consume=\"consume\" @random=\"random\" @repeat=\"repeat\"\n               @status-update=\"refreshStatus(true)\" @playlist-update=\"refreshTracks(true)\"\n               @new-playing-track=\"refreshStatus(true)\" />\n</template>\n\n<script>\nimport MusicPlugin from \"@/components/panels/Music/Index\";\nimport Utils from \"@/Utils\";\nimport Loading from \"@/components/Loading\";\n\nexport default {\n  name: \"MusicMpd\",\n  components: {Loading, MusicPlugin},\n  mixins: [Utils],\n  props: {\n    config: {\n      type: Object,\n      default: () => {},\n    },\n  },\n\n  data() {\n    return {\n      loading: false,\n      tracks: [],\n      status: {},\n    }\n  },\n\n  methods: {\n    async refreshTracks(background) {\n      if (!background)\n        this.loading = true\n\n      try {\n        this.tracks = await this.request('music.mpd.playlistinfo')\n      } finally {\n        this.loading = false\n      }\n    },\n\n    async refreshStatus(background) {\n      if (!background)\n        this.loading = true\n\n      try {\n        this.status = Object.entries(await this.request('music.mpd.status')).reduce((obj, [k, v]) => {\n          switch (k) {\n            case 'bitrate':\n            case 'volume':\n              obj[k] = parseInt(v)\n              break\n\n            case 'consume':\n            case 'random':\n            case 'repeat':\n            case 'single':\n              obj[k] = !!parseInt(v)\n              break\n\n            case 'song':\n              obj['playingPos'] = parseInt(v)\n              break\n\n            case 'time':\n              [obj['elapsed'], obj['duration']] = v.split(':').map(t => parseInt(t))\n              break\n\n            case 'elapsed':\n              break\n\n            default:\n              obj[k] = v\n              break\n          }\n\n          return obj\n        }, {})\n      } finally {\n        this.loading = false\n      }\n    },\n\n    async refresh(background) {\n      if (!background)\n        this.loading = true\n\n      try {\n        await Promise.all([this.refreshTracks(background), this.refreshStatus(background)])\n      } finally {\n        this.loading = false\n      }\n    },\n\n    async play(event) {\n      if (event?.pos != null) {\n        await this.request('music.mpd.play_pos', {pos: event.pos})\n      } else {\n        await this.request('music.mpd.play')\n      }\n\n      await this.refreshStatus(true)\n    },\n\n    async pause() {\n      await this.request('music.mpd.pause')\n      await this.refreshStatus(true)\n    },\n\n    async stop() {\n      await this.request('music.mpd.stop')\n      await this.refreshStatus(true)\n    },\n\n    async previous() {\n      await this.request('music.mpd.previous')\n      await this.refreshStatus(true)\n    },\n\n    async next() {\n      await this.request('music.mpd.next')\n      await this.refreshStatus(true)\n    },\n\n    async clear() {\n      await this.request('music.mpd.clear')\n      await Promise.all([this.refreshStatus(true), this.refreshTracks(true)])\n    },\n\n    async setVolume(volume) {\n      if (volume === this.status.volume)\n        return\n\n      await this.request('music.mpd.set_volume', {volume: volume})\n      await this.refreshStatus(true)\n    },\n\n    async seek(pos) {\n      await this.request('music.mpd.seek', {position: pos})\n      await this.refreshStatus(true)\n    },\n\n    async repeat(value) {\n      await this.request('music.mpd.repeat', {value: value})\n      await this.refreshStatus(true)\n    },\n\n    async random(value) {\n      await this.request('music.mpd.random', {value: value})\n      await this.refreshStatus(true)\n    },\n\n    async consume(value) {\n      await this.request('music.mpd.consume', {value: value})\n      await this.refreshStatus(true)\n    },\n  },\n\n  mounted() {\n    this.refresh()\n  },\n}\n</script>\n","import { render } from \"./Index.vue?vue&type=template&id=41905463&bindings={\\\"config\\\":\\\"props\\\",\\\"loading\\\":\\\"data\\\",\\\"tracks\\\":\\\"data\\\",\\\"status\\\":\\\"data\\\",\\\"refreshTracks\\\":\\\"options\\\",\\\"refreshStatus\\\":\\\"options\\\",\\\"refresh\\\":\\\"options\\\",\\\"play\\\":\\\"options\\\",\\\"pause\\\":\\\"options\\\",\\\"stop\\\":\\\"options\\\",\\\"previous\\\":\\\"options\\\",\\\"next\\\":\\\"options\\\",\\\"clear\\\":\\\"options\\\",\\\"setVolume\\\":\\\"options\\\",\\\"seek\\\":\\\"options\\\",\\\"repeat\\\":\\\"options\\\",\\\"random\\\":\\\"options\\\",\\\"consume\\\":\\\"options\\\"}\"\nimport script from \"./Index.vue?vue&type=script&lang=js\"\nexport * from \"./Index.vue?vue&type=script&lang=js\"\nscript.render = render\n\nexport default script"],"sourceRoot":""}