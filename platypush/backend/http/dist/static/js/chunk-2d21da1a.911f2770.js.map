{"version":3,"sources":["webpack:///./src/components/panels/MusicMpd/Index.vue","webpack:///./src/components/panels/MusicMpd/Index.vue?49af"],"names":["loading","plugin-name","config","tracks","status","playlists","edited-playlist","editedPlaylist","edited-playlist-tracks","editedPlaylistTracks","track-info","trackInfo","search-results","searchResults","play","pause","stop","previous","next","clear","setVolume","seek","consume","random","repeat","refreshStatus","refresh","removeFromTracklist","addToTracklist","swapTracks","loadPlaylist","playPlaylist","removePlaylist","moveTracklistTracks","saveToPlaylist","playlistEditChanged","addToTracklistFromEditedPlaylist","removeFromPlaylist","$event","playlistAdd","addToPlaylist","playlistTrackMove","search","name","components","Loading","MusicPlugin","mixins","Utils","props","type","Object","default","data","methods","refreshTracks","background","request","entries","reduce","obj","k","v","parseInt","split","map","t","refreshPlaylists","playlist","lastModified","sort","a","b","localeCompare","Promise","all","event","pos","file","resource","volume","position","value","track","length","positions","from_pos","to_pos","_loadPlaylist","confirm","from","to","uri","playlistIdx","query","filter","mounted","this","render"],"mappings":"iTACiB,EAAAA,S,iBAAf,eAA0B,Y,sBAC1B,eAakD,GAbrCC,cAAY,YAAaD,QAAS,EAAAA,QAAUE,OAAQ,EAAAA,OAASC,OAAQ,EAAAA,OAASC,OAAQ,EAAAA,OACrFC,UAAW,EAAAA,UAAYC,kBAAiB,EAAAC,eAAiBC,yBAAwB,EAAAC,qBACjFC,aAAY,EAAAC,UAAYC,iBAAgB,EAAAC,cAAgB,OAAM,EAAAC,KAAO,QAAO,EAAAC,MAAQ,OAAM,EAAAC,KAC1F,WAAU,EAAAC,SAAW,OAAM,EAAAC,KAAO,QAAO,EAAAC,MAAQ,YAAY,EAAAC,UAAY,OAAM,EAAAC,KAAO,UAAS,EAAAC,QAC/F,SAAQ,EAAAC,OAAS,SAAQ,EAAAC,OAAS,eAAa,+BAAE,EAAAC,eAAa,KAC9D,iBAAe,+BAAE,EAAAC,SAAO,KAAS,kBAAiB,+BAAE,EAAAD,eAAa,KACjE,sBAAuB,EAAAE,oBAAsB,iBAAkB,EAAAC,eAAiB,aAAa,EAAAC,WAC7F,eAAe,EAAAC,aAAe,eAAe,EAAAC,aAAe,iBAAiB,EAAAC,eAC7E,gBAAgB,EAAAC,oBAAsB,gBAAgB,EAAAC,eACtD,eAAe,EAAAC,oBACf,mCAAuC,EAAAC,iCACvC,qBAAsB,EAAAC,mBAAqB,OAAI,+BAAE,EAAA1B,UAAY2B,IAAS,cAAc,EAAAC,YACpF,gBAAiB,EAAAC,cAAgB,oBAAqB,EAAAC,kBAAoB,SAAQ,EAAAC,OAClF,cAAY,+BAAE,EAAA7B,cAAa,M,6rBAQ5B,GACb8B,KAAM,WACNC,WAAY,CAACC,UAAA,KAASC,YAAA,cACtBC,OAAQ,CAACC,EAAA,MACTC,MAAO,CACL/C,OAAQ,CACNgD,KAAMC,OACNC,QAAS,eAIbC,KAXa,WAYX,MAAO,CACLrD,SAAS,EACTG,OAAQ,GACRE,UAAW,GACXD,OAAQ,GACRG,eAAgB,KAChBE,qBAAsB,GACtBE,UAAW,KACXE,cAAe,KAInByC,QAAS,CACDC,cADC,SACaC,GAAY,+JACzBA,IACH,EAAKxD,SAAU,GAFa,kBAKR,EAAKyD,QAAQ,0BALL,OAK5B,EAAKtD,OALuB,8BAO5B,EAAKH,SAAU,EAPa,0EAW1ByB,cAZC,SAYa+B,GAAY,+JACzBA,IACH,EAAKxD,SAAU,GAFa,cAKdmD,OALc,SAKO,EAAKM,QAAQ,oBALpB,mBAK5B,EAAKrD,OALuB,KAKPsD,QALO,gBAKyCC,QAAO,SAACC,EAAD,GAAiB,0BAAVC,EAAU,KAAPC,EAAO,KAC3F,OAAQD,GACN,IAAK,UACL,IAAK,SACHD,EAAIC,GAAKE,SAASD,GAClB,MAEF,IAAK,UACL,IAAK,SACL,IAAK,SACL,IAAK,SACHF,EAAIC,KAAOE,SAASD,GACpB,MAEF,IAAK,OACHF,EAAI,cAAgBG,SAASD,GAC7B,MAEF,IAAK,OAAL,MACsCA,EAAEE,MAAM,KAAKC,KAAI,SAAAC,GAAA,OAAKH,SAASG,MADrE,sBACGN,EAAI,WADP,KACmBA,EAAI,YADvB,KAEE,MAEF,IAAK,UACH,MAEF,QACEA,EAAIC,GAAKC,EACT,MAGJ,OAAOF,IACN,IApCyB,uBAsC5B,EAAK5D,SAAU,EAtCa,4EA0C1BmE,iBAtDC,SAsDgBX,GAAY,+JAC5BA,IACH,EAAKxD,SAAU,GAFgB,kBAKP,EAAKyD,QAAQ,2BALN,OAK/B,EAAKpD,UAL0B,OAKkC4D,KAAI,SAACG,GACpE,MAAO,CACLzB,KAAMyB,EAASA,SACfC,aAAcD,EAAS,qBAExBE,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAE5B,KAAK8B,cAAcD,EAAE7B,SAVV,uBAY/B,EAAK3C,SAAU,EAZgB,0EAgB7B0B,QAtEC,SAsEO8B,GAAY,+JACnBA,IACH,EAAKxD,SAAU,GAFO,kBAKhB0E,QAAQC,IAAI,CAChB,EAAKpB,cAAcC,GACnB,EAAK/B,cAAc+B,GACnB,EAAKW,iBAAiBX,KARF,uBAWtB,EAAKxD,SAAU,EAXO,0EAepBc,KArFC,SAqFI8D,GAAO,2JACE,OAAT,OAALA,QAAK,IAALA,OAAA,EAAAA,EAAOC,KADK,gCAER,EAAKpB,QAAQ,qBAAsB,CAACoB,IAAKD,EAAMC,MAFvC,kCAGLD,EAAME,KAHD,iCAIR,EAAKrB,QAAQ,iBAAkB,CAACsB,SAAUH,EAAME,OAJxC,gDAMR,EAAKrB,QAAQ,kBANL,yBASV,EAAKhC,eAAc,GATT,+CAYZV,MAjGC,WAiGO,wKACN,EAAK0C,QAAQ,mBADP,uBAEN,EAAKhC,eAAc,GAFb,8CAKRT,KAtGC,WAsGM,wKACL,EAAKyC,QAAQ,kBADR,uBAEL,EAAKhC,eAAc,GAFd,8CAKPR,SA3GC,WA2GU,wKACT,EAAKwC,QAAQ,sBADJ,uBAET,EAAKhC,eAAc,GAFV,8CAKXP,KAhHC,WAgHM,wKACL,EAAKuC,QAAQ,kBADR,uBAEL,EAAKhC,eAAc,GAFd,8CAKPN,MArHC,WAqHO,wKACN,EAAKsC,QAAQ,mBADP,uBAENiB,QAAQC,IAAI,CAAC,EAAKlD,eAAc,GAAO,EAAK8B,eAAc,KAFpD,8CAKRnC,UA1HC,SA0HS4D,GAAQ,2JAClBA,IAAW,EAAK5E,OAAO4E,OADL,iEAIhB,EAAKvB,QAAQ,uBAAwB,CAACuB,OAAQA,IAJ9B,uBAKhB,EAAKvD,eAAc,GALH,8CAQlBJ,KAlIC,SAkIIwD,GAAK,wKACR,EAAKpB,QAAQ,iBAAkB,CAACwB,SAAUJ,IADlC,uBAER,EAAKpD,eAAc,GAFX,8CAKVD,OAvIC,SAuIM0D,GAAO,wKACZ,EAAKzB,QAAQ,mBAAoB,CAACyB,MAAOnB,UAAUmB,KADvC,uBAEZ,EAAKzD,eAAc,GAFP,8CAKdF,OA5IC,SA4IM2D,GAAO,wKACZ,EAAKzB,QAAQ,mBAAoB,CAACyB,MAAOnB,UAAUmB,KADvC,uBAEZ,EAAKzD,eAAc,GAFP,8CAKdH,QAjJC,SAiJO4D,GAAO,wKACb,EAAKzB,QAAQ,oBAAqB,CAACyB,MAAOnB,UAAUmB,KADvC,uBAEb,EAAKzD,eAAc,GAFN,8CAKfG,eAtJC,SAsJcmD,GAAU,+JACzBA,EAASD,OACXC,EAAWA,EAASD,MAFO,SAIvB,EAAKrB,QAAQ,gBAAiB,CAACsB,SAAUA,IAJlB,uBAKvB,EAAKrD,SAAQ,GALU,8CAQzBU,iCA9JC,SA8JgCwC,GAAO,iKACtCO,EAAQ,EAAK1E,qBAAqBmE,EAAMC,KACzCM,EAFuC,iEAKtC,EAAK1B,QAAQ,gBAAiB,CAACsB,SAAUI,EAAML,OALT,uBAMtC,EAAKpD,SAAQ,GANyB,WAQxCkD,EAAM9D,KARkC,kCASpC,EAAK2C,QAAQ,qBAAsB,CAACoB,IAAK,EAAK1E,OAAOiF,OAAO,IATxB,+CAYxC/C,mBA1KC,SA0KkBgD,GAAW,wKAC5B,EAAK5B,QAAQ,2BACf,CAACoB,IAAKQ,EAAW1C,KAAM,EAAKtC,UAAU,EAAKE,gBAAgBoC,OAF7B,uBAG5B,EAAKR,oBAAoB,EAAK5B,gBAHF,8CAM9BoB,oBAhLC,SAgLmB0D,GAAW,wKAC7B,EAAK5B,QAAQ,mBAAoB,CAAC4B,UAAWA,EAAUf,SAD1B,uBAE7B,EAAK5C,SAAQ,GAFgB,8CAK/BG,WArLC,SAqLUwD,GAAW,wKACpB,EAAK5B,QAAQ,iBAAkB,CAAC6B,SAAUD,EAAU,GAAIE,OAAQF,EAAU,KADtD,uBAEpB,EAAK3D,SAAQ,GAFO,8CAKtBK,aA1LC,SA0LYkD,GAAU,wKACrB,EAAKO,cAAcP,GAAU,GADR,8CAIvBnD,aA9LC,SA8LYmD,GAAU,wKACrB,EAAKO,cAAcP,GAAU,GADR,8CAIvBO,cAlMC,SAkMaP,EAAUnE,GAAM,qKAC5BsD,EAAW,EAAK/D,UAAU4E,GADE,SAE5B,EAAKxB,QAAQ,iBAAkB,CAACW,SAAUA,EAASzB,KAAM7B,KAAMA,IAFnC,uBAG5B,EAAKY,SAAQ,GAHe,8CAM9BM,eAxMC,SAwMciD,GAAU,iKACvBb,EAAW,EAAK/D,UAAU4E,GAC3BQ,QAAQ,4DAAD,OAA6DrB,EAASzB,KAAtE,MAFiB,iEAKvB,EAAKc,QAAQ,eAAgB,CAACW,SAAUA,EAASzB,OAL1B,uBAMvB,EAAKwB,kBAAiB,GANC,8CASzBjC,eAjNC,SAiNcS,GAAM,wKACnB,EAAKc,QAAQ,iBAAkB,CAACd,KAAMA,IADnB,uBAEnB,EAAKwB,kBAAiB,GAFH,8CAKrBlC,oBAtNC,SAsNmB2C,GAAO,wKACzB,EAAKnB,QAAQ,iBAAkB,CAAC6B,SAAUV,EAAMc,KAAMH,OAAQX,EAAMe,KAD3C,uBAEzB,EAAKpC,eAAc,GAFM,8CAK3BhB,YA3NC,SA2NW4C,GAAO,wKACjB,EAAK1B,QAAQ,wBAAyB,CAACmC,IAAKT,EAAOxC,KAAM,EAAKtC,UAAU,EAAKE,gBAAgBoC,OAD5E,uBAEjB,EAAKR,oBAAoB,EAAK5B,gBAFb,8CAKnB4B,oBAhOC,SAgOmBiC,GAAU,2JAClC,EAAK7D,eAAiB6D,EACN,MAAZA,EAF8B,wDAKlC,EAAKpE,SAAU,EALmB,kBAOE,EAAKyD,QAAQ,6BAC3C,CAACd,KAAM,EAAKtC,UAAU+D,GAAUzB,OARJ,OAOhC,EAAKlC,qBAP2B,8BAUhC,EAAKT,SAAU,EAViB,4EAc9BwC,cA9OC,SA8OaoC,GAAO,wKACnBF,QAAQC,IAAIC,EAAMvE,UAAU4D,IAAhB,yDAAoB,WAAO4B,GAAP,iGAC9B,EAAKpC,QAAQ,wBAAyB,CAC1CmC,IAAKhB,EAAMO,MAAML,KACjBnC,KAAM,EAAKtC,UAAUwF,GAAalD,OAHA,uBAM9B,EAAKR,oBAAoB0D,GANK,2CAApB,wDADO,8CAWrBpD,kBAzPC,SAyPiBmC,GAAO,wKACvB,EAAKnB,QAAQ,yBAA0B,CAC3Cd,KAAM,EAAKtC,UAAUuE,EAAMR,UAAUzB,KACrC2C,SAAUV,EAAMc,KAChBH,OAAQX,EAAMe,KAJa,uBAOvB,EAAKxD,oBAAoByC,EAAMR,UAPR,8CAUzB1B,OAnQC,SAmQMoD,GAAO,+JAClB,EAAK9F,SAAU,EADG,kBAIW,EAAKyD,QAAQ,mBAAoB,CAACsC,OAAQD,IAJrD,OAIhB,EAAKjF,cAJW,8BAMhB,EAAKb,SAAU,EANC,2EAWtBgG,QAtSa,WAuSXC,KAAKvE,YC3TT,EAAOwE,OAASA,EAED","file":"static/js/chunk-2d21da1a.911f2770.js","sourcesContent":["<template>\n  <Loading v-if=\"loading\" />\n  <MusicPlugin plugin-name=\"music.mpd\" :loading=\"loading\" :config=\"config\" :tracks=\"tracks\" :status=\"status\"\n               :playlists=\"playlists\" :edited-playlist=\"editedPlaylist\" :edited-playlist-tracks=\"editedPlaylistTracks\"\n               :track-info=\"trackInfo\" :search-results=\"searchResults\" @play=\"play\" @pause=\"pause\" @stop=\"stop\"\n               @previous=\"previous\" @next=\"next\" @clear=\"clear\" @set-volume=\"setVolume\" @seek=\"seek\" @consume=\"consume\"\n               @random=\"random\" @repeat=\"repeat\" @status-update=\"refreshStatus(true)\"\n               @playlist-update=\"refresh(true)\" @new-playing-track=\"refreshStatus(true)\"\n               @remove-from-tracklist=\"removeFromTracklist\" @add-to-tracklist=\"addToTracklist\" @swap-tracks=\"swapTracks\"\n               @load-playlist=\"loadPlaylist\" @play-playlist=\"playPlaylist\" @remove-playlist=\"removePlaylist\"\n               @tracklist-move=\"moveTracklistTracks\" @tracklist-save=\"saveToPlaylist\"\n               @playlist-edit=\"playlistEditChanged\"\n               @add-to-tracklist-from-edited-playlist=\"addToTracklistFromEditedPlaylist\"\n               @remove-from-playlist=\"removeFromPlaylist\" @info=\"trackInfo = $event\" @playlist-add=\"playlistAdd\"\n               @add-to-playlist=\"addToPlaylist\" @playlist-track-move=\"playlistTrackMove\" @search=\"search\"\n               @search-clear=\"searchResults = []\" />\n</template>\n\n<script>\nimport MusicPlugin from \"@/components/panels/Music/Index\";\nimport Utils from \"@/Utils\";\nimport Loading from \"@/components/Loading\";\n\nexport default {\n  name: \"MusicMpd\",\n  components: {Loading, MusicPlugin},\n  mixins: [Utils],\n  props: {\n    config: {\n      type: Object,\n      default: () => {},\n    },\n  },\n\n  data() {\n    return {\n      loading: false,\n      tracks: [],\n      playlists: [],\n      status: {},\n      editedPlaylist: null,\n      editedPlaylistTracks: [],\n      trackInfo: null,\n      searchResults: [],\n    }\n  },\n\n  methods: {\n    async refreshTracks(background) {\n      if (!background)\n        this.loading = true\n\n      try {\n        this.tracks = await this.request('music.mpd.playlistinfo')\n      } finally {\n        this.loading = false\n      }\n    },\n\n    async refreshStatus(background) {\n      if (!background)\n        this.loading = true\n\n      try {\n        this.status = Object.entries(await this.request('music.mpd.status')).reduce((obj, [k, v]) => {\n          switch (k) {\n            case 'bitrate':\n            case 'volume':\n              obj[k] = parseInt(v)\n              break\n\n            case 'consume':\n            case 'random':\n            case 'repeat':\n            case 'single':\n              obj[k] = !!parseInt(v)\n              break\n\n            case 'song':\n              obj['playingPos'] = parseInt(v)\n              break\n\n            case 'time':\n              [obj['elapsed'], obj['duration']] = v.split(':').map(t => parseInt(t))\n              break\n\n            case 'elapsed':\n              break\n\n            default:\n              obj[k] = v\n              break\n          }\n\n          return obj\n        }, {})\n      } finally {\n        this.loading = false\n      }\n    },\n\n    async refreshPlaylists(background) {\n      if (!background)\n        this.loading = true\n\n      try {\n        this.playlists = (await this.request('music.mpd.listplaylists')).map((playlist) => {\n          return {\n            name: playlist.playlist,\n            lastModified: playlist['last-modified'],\n          }\n        }).sort((a, b) => a.name.localeCompare(b.name))\n      } finally {\n        this.loading = false\n      }\n    },\n\n    async refresh(background) {\n      if (!background)\n        this.loading = true\n\n      try {\n        await Promise.all([\n          this.refreshTracks(background),\n          this.refreshStatus(background),\n          this.refreshPlaylists(background),\n        ])\n      } finally {\n        this.loading = false\n      }\n    },\n\n    async play(event) {\n      if (event?.pos != null) {\n        await this.request('music.mpd.play_pos', {pos: event.pos})\n      } else if (event.file) {\n        await this.request('music.mpd.play', {resource: event.file})\n      } else {\n        await this.request('music.mpd.play')\n      }\n\n      await this.refreshStatus(true)\n    },\n\n    async pause() {\n      await this.request('music.mpd.pause')\n      await this.refreshStatus(true)\n    },\n\n    async stop() {\n      await this.request('music.mpd.stop')\n      await this.refreshStatus(true)\n    },\n\n    async previous() {\n      await this.request('music.mpd.previous')\n      await this.refreshStatus(true)\n    },\n\n    async next() {\n      await this.request('music.mpd.next')\n      await this.refreshStatus(true)\n    },\n\n    async clear() {\n      await this.request('music.mpd.clear')\n      await Promise.all([this.refreshStatus(true), this.refreshTracks(true)])\n    },\n\n    async setVolume(volume) {\n      if (volume === this.status.volume)\n        return\n\n      await this.request('music.mpd.set_volume', {volume: volume})\n      await this.refreshStatus(true)\n    },\n\n    async seek(pos) {\n      await this.request('music.mpd.seek', {position: pos})\n      await this.refreshStatus(true)\n    },\n\n    async repeat(value) {\n      await this.request('music.mpd.repeat', {value: parseInt(+value)})\n      await this.refreshStatus(true)\n    },\n\n    async random(value) {\n      await this.request('music.mpd.random', {value: parseInt(+value)})\n      await this.refreshStatus(true)\n    },\n\n    async consume(value) {\n      await this.request('music.mpd.consume', {value: parseInt(+value)})\n      await this.refreshStatus(true)\n    },\n\n    async addToTracklist(resource) {\n      if (resource.file)\n        resource = resource.file\n\n      await this.request('music.mpd.add', {resource: resource})\n      await this.refresh(true)\n    },\n\n    async addToTracklistFromEditedPlaylist(event) {\n      const track = this.editedPlaylistTracks[event.pos]\n      if (!track)\n        return\n\n      await this.request('music.mpd.add', {resource: track.file})\n      await this.refresh(true)\n\n      if (event.play)\n        await this.request('music.mpd.play_pos', {pos: this.tracks.length-1})\n    },\n\n    async removeFromPlaylist(positions) {\n      await this.request('music.mpd.playlistdelete',\n          {pos: positions, name: this.playlists[this.editedPlaylist].name})\n      await this.playlistEditChanged(this.editedPlaylist)\n    },\n\n    async removeFromTracklist(positions) {\n      await this.request('music.mpd.delete', {positions: positions.sort()})\n      await this.refresh(true)\n    },\n\n    async swapTracks(positions) {\n      await this.request('music.mpd.move', {from_pos: positions[0], to_pos: positions[1]})\n      await this.refresh(true)\n    },\n\n    async playPlaylist(position) {\n      await this._loadPlaylist(position, true)\n    },\n\n    async loadPlaylist(position) {\n      await this._loadPlaylist(position, false)\n    },\n\n    async _loadPlaylist(position, play) {\n      const playlist = this.playlists[position]\n      await this.request('music.mpd.load', {playlist: playlist.name, play: play})\n      await this.refresh(true)\n    },\n\n    async removePlaylist(position) {\n      const playlist = this.playlists[position]\n      if (!confirm(`Are you REALLY sure that you want to remove the playlist ${playlist.name}?`))\n        return\n\n      await this.request('music.mpd.rm', {playlist: playlist.name})\n      await this.refreshPlaylists(true)\n    },\n\n    async saveToPlaylist(name) {\n      await this.request('music.mpd.save', {name: name})\n      await this.refreshPlaylists(true)\n    },\n\n    async moveTracklistTracks(event) {\n      await this.request('music.mpd.move', {from_pos: event.from, to_pos: event.to})\n      await this.refreshTracks(true)\n    },\n\n    async playlistAdd(track) {\n      await this.request('music.mpd.playlistadd', {uri: track, name: this.playlists[this.editedPlaylist].name})\n      await this.playlistEditChanged(this.editedPlaylist)\n    },\n\n    async playlistEditChanged(playlist) {\n      this.editedPlaylist = playlist\n      if (playlist == null)\n        return\n\n      this.loading = true\n      try {\n        this.editedPlaylistTracks = await this.request('music.mpd.listplaylistinfo',\n            {name: this.playlists[playlist].name})\n      } finally {\n        this.loading = false\n      }\n    },\n\n    async addToPlaylist(event) {\n      await Promise.all(event.playlists.map(async (playlistIdx) => {\n        await this.request('music.mpd.playlistadd', {\n          uri: event.track.file,\n          name: this.playlists[playlistIdx].name\n        })\n\n        await this.playlistEditChanged(playlistIdx)\n      }))\n    },\n\n    async playlistTrackMove(event) {\n      await this.request('music.mpd.playlistmove', {\n        name: this.playlists[event.playlist].name,\n        from_pos: event.from,\n        to_pos: event.to,\n      })\n\n      await this.playlistEditChanged(event.playlist)\n    },\n\n    async search(query) {\n      this.loading = true\n\n      try {\n        this.searchResults = await this.request('music.mpd.search', {filter: query})\n      } finally {\n        this.loading = false\n      }\n    },\n  },\n\n  mounted() {\n    this.refresh()\n  },\n}\n</script>\n","import { render } from \"./Index.vue?vue&type=template&id=57a3d2fc&bindings={\\\"config\\\":\\\"props\\\",\\\"loading\\\":\\\"data\\\",\\\"tracks\\\":\\\"data\\\",\\\"playlists\\\":\\\"data\\\",\\\"status\\\":\\\"data\\\",\\\"editedPlaylist\\\":\\\"data\\\",\\\"editedPlaylistTracks\\\":\\\"data\\\",\\\"trackInfo\\\":\\\"data\\\",\\\"searchResults\\\":\\\"data\\\",\\\"refreshTracks\\\":\\\"options\\\",\\\"refreshStatus\\\":\\\"options\\\",\\\"refreshPlaylists\\\":\\\"options\\\",\\\"refresh\\\":\\\"options\\\",\\\"play\\\":\\\"options\\\",\\\"pause\\\":\\\"options\\\",\\\"stop\\\":\\\"options\\\",\\\"previous\\\":\\\"options\\\",\\\"next\\\":\\\"options\\\",\\\"clear\\\":\\\"options\\\",\\\"setVolume\\\":\\\"options\\\",\\\"seek\\\":\\\"options\\\",\\\"repeat\\\":\\\"options\\\",\\\"random\\\":\\\"options\\\",\\\"consume\\\":\\\"options\\\",\\\"addToTracklist\\\":\\\"options\\\",\\\"addToTracklistFromEditedPlaylist\\\":\\\"options\\\",\\\"removeFromPlaylist\\\":\\\"options\\\",\\\"removeFromTracklist\\\":\\\"options\\\",\\\"swapTracks\\\":\\\"options\\\",\\\"playPlaylist\\\":\\\"options\\\",\\\"loadPlaylist\\\":\\\"options\\\",\\\"_loadPlaylist\\\":\\\"options\\\",\\\"removePlaylist\\\":\\\"options\\\",\\\"saveToPlaylist\\\":\\\"options\\\",\\\"moveTracklistTracks\\\":\\\"options\\\",\\\"playlistAdd\\\":\\\"options\\\",\\\"playlistEditChanged\\\":\\\"options\\\",\\\"addToPlaylist\\\":\\\"options\\\",\\\"playlistTrackMove\\\":\\\"options\\\",\\\"search\\\":\\\"options\\\"}\"\nimport script from \"./Index.vue?vue&type=script&lang=js\"\nexport * from \"./Index.vue?vue&type=script&lang=js\"\nscript.render = render\n\nexport default script"],"sourceRoot":""}