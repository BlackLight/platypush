{"version":3,"file":"static/js/2068.103aab15.js","mappings":"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","sources":["webpack://platypush/./src/components/panels/MusicSpotify/Index.vue","webpack://platypush/./src/components/panels/MusicSpotify/Index.vue?ccf9"],"sourcesContent":["<template>\n  <Loading v-if=\"loading\" />\n  <MusicPlugin plugin-name=\"music.spotify\" :loading=\"loading\" :config=\"config\" :tracks=\"tracks\" :status=\"status\"\n               :playlists=\"playlists\" :edited-playlist=\"editedPlaylist\" :edited-playlist-tracks=\"editedPlaylistTracks\"\n               :track-info=\"trackInfo\" :search-results=\"searchResults\" :library-results=\"libraryResults\" :path=\"path\"\n               :devices=\"devices\" :selected-device=\"selectedDevice\" :active-device=\"activeDevice\" @play=\"play\"\n               @pause=\"pause\" @stop=\"stop\" @previous=\"previous\" @next=\"next\" @clear=\"clear\" @set-volume=\"setVolume\"\n               @seek=\"seek\" @consume=\"consume\" @random=\"random\" @repeat=\"repeat\" @status-update=\"refreshStatus(true)\"\n               @new-playing-track=\"refreshStatus(true)\" @remove-from-tracklist=\"removeFromTracklist\"\n               @add-to-tracklist=\"addToTracklist\" @swap-tracks=\"swapTracks\" @load-playlist=\"loadPlaylist\"\n               @play-playlist=\"playPlaylist\" @remove-playlist=\"removePlaylist\" @tracklist-move=\"moveTracklistTracks\"\n               @tracklist-save=\"saveToPlaylist\" @playlist-edit=\"playlistEditChanged\" @refresh-status=\"refreshStatus\"\n               @add-to-tracklist-from-edited-playlist=\"addToTracklistFromEditedPlaylist\"\n               @remove-from-playlist=\"removeFromPlaylist\" @info=\"trackInfo = $event\" @playlist-add=\"playlistAdd\"\n               @add-to-playlist=\"addToPlaylist\" @playlist-track-move=\"playlistTrackMove\" @search=\"search\"\n               @search-clear=\"searchResults = []\" @cd=\"cd\" @playlist-update=\"refresh(true)\"\n               @select-device=\"selectDevice\" />\n</template>\n\n<script>\nimport MusicPlugin from \"@/components/panels/Music/Index\";\nimport Utils from \"@/Utils\";\nimport Loading from \"@/components/Loading\";\n\nexport default {\n  name: \"MusicSpotify\",\n  components: {Loading, MusicPlugin},\n  mixins: [Utils],\n  props: {\n    config: {\n      type: Object,\n      default: () => {},\n    },\n  },\n\n  data() {\n    return {\n      loading: false,\n      devices: {},\n      selectedDevice: null,\n      activeDevice: null,\n      tracks: [],\n      playlists: [],\n      status: {},\n      editedPlaylist: null,\n      editedPlaylistTracks: [],\n      trackInfo: null,\n      searchResults: [],\n      libraryResults: [],\n      path: '/',\n    }\n  },\n\n  methods: {\n    async refreshTracks(background) {\n      if (!background)\n        this.loading = true\n\n      try {\n        this.tracks = (await this.request('music.spotify.history')).map((track) => {\n          track.time = track.duration\n          return track\n        })\n      } finally {\n        this.loading = false\n      }\n    },\n\n    async refreshStatus(background) {\n      if (!background)\n        this.loading = true\n\n      this.devices = (await this.request('music.spotify.get_devices')).reduce((obj, device) => {\n        obj[device.id] = device\n        return obj\n      }, {})\n\n      const activeDevices = Object.values(this.devices).filter((device) => device.is_active)\n      this.activeDevice = activeDevices.length ? activeDevices[0].id : null\n      if (!this.selectedDevice && Object.values(this.devices).length)\n        this.selectedDevice = this.activeDevice || [...Object.values(this.devices)][0].id\n\n      try {\n        const status = await this.request('music.spotify.status')\n        this.status = {\n          ...status,\n          duration: status.time,\n        }\n      } finally {\n        this.loading = false\n      }\n\n      if (this.status.track) {\n        if (this.tracks?.[0]?.id !== this.status.track.id)\n          this.tracks = [{\n            ...this.status.track,\n            time: this.status.duration,\n          }, ...this.tracks]\n        this.status.playingPos = 0\n      }\n    },\n\n    async refreshPlaylists(background) {\n      if (!background)\n        this.loading = true\n\n      try {\n        this.playlists = (await this.request('music.spotify.get_playlists'))\n            .sort((a, b) => a.name.localeCompare(b.name))\n      } finally {\n        this.loading = false\n      }\n    },\n\n    async refresh(background) {\n      if (!background)\n        this.loading = true\n\n      try {\n        await Promise.all([\n          this.refreshTracks(background),\n          this.refreshStatus(background),\n          this.refreshPlaylists(background),\n        ])\n      } finally {\n        this.loading = false\n      }\n    },\n\n    async play(event) {\n      if (event?.pos != null)\n        event.uri = this.tracks[event.pos].uri\n\n      if (event?.uri) {\n        await this.request('music.spotify.play', {\n          resource: event.uri,\n          device: this.selectedDevice,\n        })\n      } else {\n        await this.request('music.spotify.play', {\n          device: this.selectedDevice,\n        })\n      }\n\n      await this.refreshStatus(true)\n    },\n\n    async pause() {\n      await this.request('music.spotify.pause', {\n        device: this.selectedDevice,\n      })\n      await this.refreshStatus(true)\n    },\n\n    async stop() {\n      await this.request('music.spotify.stop', {\n        device: this.selectedDevice,\n      })\n      await this.refreshStatus(true)\n    },\n\n    async previous() {\n      await this.request('music.spotify.previous', {\n        device: this.selectedDevice,\n      })\n      await this.refreshStatus(true)\n    },\n\n    async next() {\n      await this.request('music.spotify.next', {\n        device: this.selectedDevice,\n      })\n      await this.refreshStatus(true)\n    },\n\n    async clear() {},\n\n    async setVolume(volume) {\n      if (volume === this.status.volume)\n        return\n\n      await this.request('music.spotify.set_volume', {\n        device: this.selectedDevice,\n        volume: volume,\n      })\n      await this.refreshStatus(true)\n    },\n\n    async seek(pos) {\n      await this.request('music.spotify.seek', {\n        device: this.selectedDevice,\n        position: pos,\n      })\n      await this.refreshStatus(true)\n    },\n\n    async repeat() {\n      await this.request('music.spotify.repeat', {\n        device: this.selectedDevice,\n        value: !this.status?.repeat,\n      })\n      await this.refreshStatus(true)\n    },\n\n    async random() {\n      await this.request('music.spotify.random', {\n        device: this.selectedDevice,\n        value: !this.status?.random,\n      })\n      await this.refreshStatus(true)\n    },\n\n    async consume() {},\n\n    async addToTracklist(resource) {\n      if (resource.file)\n        resource = resource.file\n\n      await this.request('music.spotify.add', {\n        device: this.selectedDevice,\n        resource: resource,\n      })\n      await this.refresh(true)\n    },\n\n    async addToTracklistFromEditedPlaylist(event) {\n      const track = this.editedPlaylistTracks[event.pos]\n      if (!track)\n        return\n\n      const method = event.play ? 'play' : 'add'\n      await this.request(`music.spotify.${method}`, {\n        device: this.selectedDevice,\n        resource: track.uri\n      })\n      await this.refresh(true)\n    },\n\n    async removeFromPlaylist(positions) {\n      const tracks = positions.map((pos) => this.playlists[this.editedPlaylist].tracks[pos].uri)\n      await this.request('music.spotify.remove_from_playlist',\n          {resources: tracks, playlist: this.playlists[this.editedPlaylist].name})\n      await this.playlistEditChanged(this.editedPlaylist)\n    },\n\n    async removeFromTracklist() {},\n    async swapTracks() {},\n\n    async playPlaylist(position) {\n      await this._loadPlaylist(position, true)\n    },\n\n    async loadPlaylist(position) {\n      await this._loadPlaylist(position, false)\n    },\n\n    async _loadPlaylist(position) {\n      const playlist = this.playlists[position]\n      await this.request('music.spotify.play', {\n        resource: playlist.uri,\n        device: this.selectedDevice,\n      })\n      await this.refresh(true)\n    },\n\n    async removePlaylist() {\n      this.notify({\n        text: 'Playlist removal is not supported'\n      })\n    },\n\n    async saveToPlaylist() {},\n    async moveTracklistTracks() {},\n\n    async playlistAdd(track) {\n      await this.request('music.spotify.add_to_playlist', {\n        resources: [track],\n        playlist: this.playlists[this.editedPlaylist].uri\n      })\n\n      await this.playlistEditChanged(this.editedPlaylist)\n    },\n\n    async playlistEditChanged(playlist) {\n      this.editedPlaylist = playlist\n      if (playlist == null)\n        return\n\n      this.loading = true\n      try {\n        const list = await this.request('music.spotify.get_playlist', {\n          playlist: this.playlists[playlist].uri\n        })\n\n        this.editedPlaylistTracks = list.tracks.map((track) => {\n          track.time = track.duration\n          return track\n        })\n      } finally {\n        this.loading = false\n      }\n    },\n\n    async addToPlaylist(event) {\n      await Promise.all(event.playlists.map(async (playlistIdx) => {\n        await this.request('music.spotify.add_to_playlist', {\n          resources: [event.track.uri],\n          playlist: this.playlists[playlistIdx].uri\n        })\n\n        await this.playlistEditChanged(playlistIdx)\n      }))\n    },\n\n    async playlistTrackMove(event) {\n      await this.request('music.spotify.playlist_move', {\n        playlist: this.playlists[event.playlist].uri,\n        from_pos: event.from-1,\n        to_pos: event.to-1,\n      })\n\n      await this.playlistEditChanged(event.playlist)\n    },\n\n    async search(query) {\n      this.loading = true\n\n      try {\n        this.searchResults = (await this.request('music.spotify.search', query)).map((item) => {\n          item.time = item.duration\n          return item\n        })\n      } finally {\n        this.loading = false\n      }\n    },\n\n    async cd() {},\n\n    async selectDevice(deviceId) {\n      if (this.selectedDevice === deviceId)\n        return\n\n      await this.request('music.spotify.start_or_transfer_playback', {\n        device: deviceId,\n      })\n\n      this.selectedDevice = deviceId\n      this.refreshStatus(true)\n    },\n  },\n\n  mounted() {\n    this.refresh()\n  },\n}\n</script>\n","import { render } from \"./Index.vue?vue&type=template&id=034e04ce\"\nimport script from \"./Index.vue?vue&type=script&lang=js\"\nexport * from \"./Index.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["$data","loading","_createBlock","_component_Loading","key","_createVNode","_component_MusicPlugin","config","$props","tracks","status","playlists","editedPlaylist","editedPlaylistTracks","trackInfo","searchResults","libraryResults","path","devices","selectedDevice","activeDevice","onPlay","$options","play","onPause","pause","onStop","stop","onPrevious","previous","onNext","next","onClear","clear","onSetVolume","setVolume","onSeek","seek","onConsume","consume","onRandom","random","onRepeat","repeat","onStatusUpdate","_cache","$event","refreshStatus","onNewPlayingTrack","onRemoveFromTracklist","removeFromTracklist","onAddToTracklist","addToTracklist","onSwapTracks","swapTracks","onLoadPlaylist","loadPlaylist","onPlayPlaylist","playPlaylist","onRemovePlaylist","removePlaylist","onTracklistMove","moveTracklistTracks","onTracklistSave","saveToPlaylist","onPlaylistEdit","playlistEditChanged","onRefreshStatus","onAddToTracklistFromEditedPlaylist","addToTracklistFromEditedPlaylist","onRemoveFromPlaylist","removeFromPlaylist","onInfo","onPlaylistAdd","playlistAdd","onAddToPlaylist","addToPlaylist","onPlaylistTrackMove","playlistTrackMove","onSearch","search","onSearchClear","onCd","cd","onPlaylistUpdate","refresh","onSelectDevice","selectDevice","name","components","Loading","MusicPlugin","mixins","Utils","props","type","Object","default","data","methods","refreshTracks","background","this","request","map","track","time","duration","reduce","obj","device","id","activeDevices","values","filter","is_active","length","playingPos","refreshPlaylists","sort","a","b","localeCompare","Promise","all","event","pos","uri","resource","volume","position","value","file","method","positions","resources","playlist","_loadPlaylist","notify","text","list","async","playlistIdx","from_pos","from","to_pos","to","query","item","deviceId","mounted","__exports__","render"],"sourceRoot":""}